easy problems:

344. reverse a string 
class Solution(object):
    def reverseString(self, s):
        """
        :type s: str
        :rtype: str
        """
        #return ''.join(s[i] for i in range(len(s)-1,-1,-1))
        return s[::-1]
        
  
  292. Nim Game
  class Solution(object):
    def canWinNim(self, n):
        """
        :type n: int
        :rtype: bool
        """
        return  False if n %4 == 0 else True
    
    
    371. Sum of Two Integers: no use of +,-
    python code run out of time limit,,,so  change to c++.
    loop carry,add carry.
    class Solution {
    public:
    int getSum(int a, int b) {
        int sum=a;
        int carry=b;
        int tmp;
        while (carry){
            tmp=sum;
            sum^=carry;
            carry=(tmp & carry) << 1;
        }
        return sum;
    }
};


    258. Add Digits
      get inspired by  hints: https://en.wikipedia.org/wiki/Digital_root.  feel so sorry for myself.
      
     class Solution(object):
    def addDigits(self, num):
        """
        :type num: int
        :rtype: int
        """
        return 0 if num == 0 else 1+(num-1) % 9
    
    389. Find the Difference
          use set operation. 
    def findTheDifference(self, s, t):
        """
        :type s: str
        :type t: str
        :rtype: str
        """
        res = 0
        for str1 in s:
            res ^= ord(str1)
        for str2 in t:
            res ^= ord(str2)
        return chr(res)
    226. Invert Binary Tree
        #invert from left to right,then swap them.
        def invertTree(self, root):
        if root is None:
            return None
        if root.left:
            self.invertTree(root.left)
        if root.right:
            self.invertTree(root.right)
        root.left, root.right = root.right, root.left
        return root

    141. Linked List Cycle:
    def hasCycle(self, head):
        """
        :type head: ListNode
        :rtype: bool
        """
        # fast and slow pointer , if cycle is there, fast can catch up slow in next round.
        if not head or not head.next:
            return False
            
        p = head
        q = head.next
        
        while p and q:
            
            if p == q:
                return True
            p = p.next
            if q.next:
                q = q.next.next
            else:
                return False
        return False

198. House Robber
    def rob(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
    
        house_ct = len(nums)
        
        if house_ct :
            money_rob = [0]*(house_ct+1)
            money_rob[1] = nums[0]
        else:
            return 0
        
        for i in range(2,house_ct+1):
            
            money_rob[i] = max(money_rob[i-1],money_rob[i-2]+nums[i-1])
            
        return money_rob[house_ct]

107. Binary Tree Level Order Traversal II

def levelOrderBottom(self, root):
        """
        learn to know how to travel a tree level by level.
        :type root: TreeNode
        :rtype: List[List[int]]
        """
        node_list = []
        if not root:
            return node_list
        parent_level = [root]
        while parent_level:
            
            node_list.append([n.val for n in parent_level])# add current lever node in results
            child_level = []
            for node in parent_level:#  move to next level
                if node.left:
                    child_level.append(node.left)
                if node.right:
                    child_level.append(node.right)
            parent_level = child_level
        node_list.reverse()# down to up.
        return node_list
101. Symmetric Tree
    def isSymmetric(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        def is_balance(left,right):
            if not left and not right:
                return True
            if (left and not right) or (not left and right) or left.val != right.val:
                return False
            return is_balance(left.left,right.right) and is_balance(left.right,right.left)
        
        if not root:
            return True
        return is_balance(root.left,root.right)
396. Rotate Function
    # my code, time exceeded.-_-
    
   def maxRotateFunction(self, A):
        """
        :type A: List[int]
        :rtype: int
        """
        if not A:
            return 0
            
        def list_rotate(l,k):
            return l[k:]+l[:k]
            
        lens = len(A)
        index_range = range(lens)
        index = list(index_range)
        
        return max([sum([x*y for x,y in zip(list_rotate(A,k),index)]) for k in index_range])
        
        # after online help: 
        def maxRotateFunction(self, A):
        """
        :type A: List[int]
        :rtype: int
        """
        if not A:
            return 0
            
        s = sum(A)
        n = len(A)
        
        max_sum = sum([x*y for x,y in zip(A,range(n))])
        tmp = max_sum
        for i in range(1,n):
            tmp = tmp + s - n*A[n-i]
            if tmp > max_sum:
                max_sum = tmp
        return max_sum
118. Pascal's Triangle

def generate(self, numRows):
        """
        :type numRows: int
        :rtype: List[List[int]]
        """
        
        if numRows <= 0:
            return []
        if numRows ==1:
            return [[1]]
        if numRows == 2:
            return [[1],[1,1]]
        res=[[1],[1,1]]
        for i in range(2,numRows):
            col = i+1
            l=[1]
            for j in range(1,col-1):
                l.append(res[i-1][j-1] + res[i-1][j])
            l.append(1)
            
            res.append(l)
        
        return res
      
 66. Plus One
 def plusOne(self, digits):
        """
        :type digits: List[int]
        :rtype: List[int]
        """
        lens = len(digits)
        carry = 1
        
        for i in range(lens-1,-1,-1):
            
            digits[i] += carry
            carry = digits[i] / 10
            
            if carry :
                digits[i] %= 10
            else:
                break
        
        if carry:
            digits.insert(0,carry)
        return digits
337. House Robber III
#not AC yet..but why?
 def rob(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        def dp(root):
            if not root:
                return 0,0
            left_steal,left_not_steal = dp(root.left)
            right_steal,right_not_steal = dp(root.right)
            
            root_not_steal = max(left_steal,left_not_steal) + max(right_steal,right_not_steal)
            
            root_steal = left_not_steal + right_not_steal + root.val
            
            return root_not_steal,root_steal
        steal,not_steal = dp(root)
        return max(steal,not_steal)
4. Median of Two Sorted Arrays
class Solution(object):
    def findMedianSortedArrays(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: float
        """
        n = len(nums1) + len(nums2)
        if n % 2 == 1:
            return self.findKth(nums1, nums2, n / 2 + 1)
        else:
            smaller = self.findKth(nums1, nums2, n / 2)
            bigger = self.findKth(nums1, nums2, n / 2 + 1)
            return (smaller + bigger) / 2.0

    def findKth(self, A, B, k):
        if len(A) == 0:
            return B[k - 1]
        if len(B) == 0:
            return A[k - 1]
        if k == 1:
            return min(A[0], B[0])
        
        a = A[k / 2 - 1] if len(A) >= k / 2 else None
        b = B[k / 2 - 1] if len(B) >= k / 2 else None
        
        if b is None or (a is not None and a < b):
            return self.findKth(A[k / 2:], B, k - k / 2)
        return self.findKth(A, B[k / 2:], k - k / 2)
 
17. Letter Combinations of a Phone Number
    def letterCombinations(self, digits):
        """
        :type digits: str
        :rtype: List[str]
        """
        
        if not digits:
            return []
            
        dict = {'2':['a','b','c'],
                '3':['d','e','f'],
                '4':['g','h','i'],
                '5':['j','k','l'],
                '6':['m','n','o'],
                '7':['p','q','r','s'],
                '8':['t','u','v'],
                '9':['w','x','y','z'],
                '1':['*'],
                '0':[' ']
                }
        ll = [dict[key] for key in digits]
        
        return [''.join(item) for item in itertools.product(*ll)]
